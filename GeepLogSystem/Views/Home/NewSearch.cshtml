@{
    Layout = "~/Views/_LayoutPage.cshtml";
    <link href="~/Style/search.css" rel="stylesheet" />
}
<style>
    pre {
        white-space: pre-wrap;
        word-wrap: break-word;
    }
</style>
<div id="app">
    <span class="form-wrapper cf">
        <input id="inputtext" v-on:keyup.enter="search" v-model="q" type="text" placeholder="搜索关键词" required>
        <button type="button" v-on:click="search">搜索</button>
    </span>
    <div class="searchType">
        <label><input type="checkbox" id="wxback-cb" value="wxback" />微信后端</label>
        <label><input type="checkbox" id="front-cb" value="front" />微信前端</label>
        <label><input type="checkbox" id="isError-cb" value="true" />Error</label>
        <div class="row " style="padding:0 200px">
            <label class="date col-md-2"></label>
            <label class="date col-md-4" id="start" data-date="@DateTime.Now.ToString("yyyy-MM-dd")" data-date-format="yyyy-mm-dd">
                <input class="form-control" size="12" type="text" value="选择开始日期" readonly>
                <span class="add-on"><i class="icon-th"></i></span>
            </label>
            <label class="date col-md-4" id="end" data-date="@DateTime.Now.ToString("yyyy-MM-dd")" data-date-format="yyyy-mm-dd">
                <input class="form-control" size="12" type="text" value="选择结束日期" readonly>
                <span class="add-on"><i class="icon-th"></i></span>
            </label>
        </div>
        
    </div>
    
    <div>
        <span style="float:left;line-height:69px;padding-right:30px;">共找到： {{count}} 条数据</span>
        <ul class="pagination pagination-demo pagination-sm"></ul>
        <a id="export-a" href="javascript:;"><span id="export-span" v-on:click="export">结果导出</span></a>
    </div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th></th>
                <th>类型</th>
                <th>ip地址</th>
                <th>时间</th>
                <th>类名</th>
                <th>内容</th>
            </tr>
        </thead>
        <tbody id="interpolation">
            <tr v-for="item in list" data-time="{{item.Time}}" data-class="{{item.Class}}" data-ip="{{item.Ip}}" data-description="{{item.Description}}" data-logname="{{item.LogName}}" data-logid="{{item._id}}" class="zft-tr" v-on:click="logClick">
                <th v-if="item.IsErrorLog"><span class="glyphicon glyphicon-remove"></span></th>
                <th v-else><span class="glyphicon glyphicon-ok"></span></th>
                <th>{{item.LogName}}</th>
                <th>{{item.Ip}}</th>
                <th>{{item.Time}}</th>
                <th>{{item.Class}}</th>
                <th>{{item.Description}}</th>
            </tr>
        </tbody>
    </table>
</div>
@section script{
    <script src="~/Scripts/vue.js"></script>
    <script src="~/Scripts/vue-resource.js"></script>
    <link href="~/Scripts/dialog/css/bootstrap-dialog.min.css" rel="stylesheet" />
    <script src="~/Scripts/dialog/js/bootstrap-dialog.min.js"></script>
    <script src="~/Scripts/jqPaginator.min.js"></script>
    <script>
        $('#@ViewBag.ActiveId').addClass('active');
        document.getElementById('inputtext').focus();
        //Vue.use('vue-resource');
        var vm = new Vue({
            el: '#app',
            data: {
                q: '',
                list: '',
                count: 0,
                str:''
            },
            methods: {
                search: function () {
                    if (!this.q) {
                        alert("搜索条件为空");
                    } else {
                        var url = '/api/InsertLog/TextSearch?q=' + this.q;
                        var logname='';
                        if ($('#wxback-cb').prop('checked')) {
                            logname += 'wxback'
                        }
                        if ($('#front-cb').prop('checked')) {
                            if ($('#wxback-cb').prop('checked')) {
                                logname += ',front'
                            } else {
                                logname += 'front'
                            }
                        }
                        if (logname) {
                            url += '&logname=' + logname;
                        }
                        
                        if ($('#isError-cb').prop('checked')) {
                            url += '&isError=true'
                        }
                        var startTime = $($('.form-control')[0]).val();
                        var endTime = $($('.form-control')[1]).val();
                        if (startTime !== "选择开始日期") {
                            url += '&startTime=' + startTime;
                        };
                        if (endTime !== "选择结束日期") {
                            url += '&endTime=' + endTime;
                        };
                        this.$http({ url: url, method: 'GET' }).then(function (response) {
                            InitData(response)
                        }, function (response) {
                            alert("请求错误");
                        });
                    }
                    
                },
                logClick: function (event) {
                    var self = event.currentTarget,
                        Trade_Type = $(self).attr('data-Class'),
                        Trade_Ip = $(self).attr('data-Ip'),
                        Trade_Time = $(self).attr('data-Time'),
                        Message = $(self).attr('data-description'),
                        id = $(self).attr('data-logid'),
                        logName = $(self).attr('data-logname');
                    vm.getBeforeLog(id, logName, { ip: Trade_Ip, clas: Trade_Type, description: Message })
                },
                page: Page,
                getBeforeLog: function(id,logName,op){
                    var resultStr = [],vm = this
                    $.get('/api/InsertLog/BeforeLogs?id=' + id + '&logname=' + logName).then(function (data) {
                        data.forEach(function(x){
                            resultStr.push(x.Description)
                        })
                        return resultStr.join('\n')
                    }).then(function(resp){
                        vm.str = resp
                        vm.showDilog(op.time,op.ip,op.clas,op.description)
                    })
                },
                showDilog: function(time,ip,clas,description){
                    textAndPic = $('<div></div>');
                    textAndPic.append('<b>时间：</b>' + time + '</br><hr>');
                    textAndPic.append('<b>ip地址：</b>' + ip + '</br><hr>');
                    textAndPic.append('<b>类名：</b>' + clas + '</br><hr>');
                    textAndPic.append('<b>附加信息：</b><pre>' + description + '</pre></br>');
                    textAndPic.append('<b>前5条日志：</b><pre>' + vm.str + '</pre></br><hr>');
                    BootstrapDialog.show({
                        title: '日志详情',
                        message: textAndPic,
                        buttons: [{
                            label: '关闭',
                            action: function (dialogItself) {
                                dialogItself.close();
                            }
                        }],
                        onshown: function () {
                            $('.modal-content').css('overflow-y', 'auto');
                        }
                    });
                },
                export: function () {
                    if (!this.q) {
                        alert("搜索条件为空");
                    } else {
                        $('#export-span').text('导出中。。');
                        this.$http({ url: '/api/InsertLog/Export?q=' + this.q, method: 'GET' }).then(function (response) {
                            alert("导出成功" + response.data);
                            $('#export-span').text('结果导出');
                        }, function (response) {
                            alert("导出错误");
                            $('#export-span').text('结果导出');
                        });
                    }
                    
                }
            }

        });
        function InitData(response) {
            if (response && response.data && response.data.length > 0) {
                var data = response.data;
                vm.count = response.data.length;
                vm.list = data;
                //vm.page();
                $('.form-wrapper').animate({ marginTop: "10px", marginBottom: "25px" }, 800);
            } else {
                alert('没有找到对应的结果');
                vm.list = '';
                vm.count = 0;
            }
        };
        function Page() {
            $(".pagination-demo").jqPaginator({
                totalCounts: vm.count,
                pageSize: 15,
                visiblePages: 10,
                currentPage: 1,
                first: '<li class="first"><a href="?p=1">首页<\/a><\/li>',
                prev: '<li class="prev"><a href="?p={{page}}">上一页<\/a><\/li>',
                next: '<li class="next"><a href="?p={{page}}">下一页<\/a><\/li>',
                last: '<li class="last"><a href="?p={{totalPages}}">末页<\/a><\/li>',
                page: '<li class="page"><a href="?p={{page}}">{{page}}<\/a><\/li>',
                onPageChange: function (n) {
                    $(".pagination-demo .disabled").each(function () {
                        $(this).find('a').attr('href', '#');
                    })
                }
            });

        };
        var HtmlEncode = function (str) {
            var hex = new Array('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f');
            var preescape = str;
            var escaped = "";
            for (var i = 0; i < preescape.length; i++) {
                var p = preescape.charAt(i);
                escaped = escaped + escapeCharx(p);
            }

            return escaped;

            function escapeCharx(original) {
                var found = true;
                var thechar = original.charCodeAt(0);
                switch (thechar) {
                    case 10: return "<br/>"; break; //newline
                    case 32: return "&nbsp;"; break; //space
                    case 34: return "&quot;"; break; //"
                    case 38: return "&amp;"; break; //&
                    case 39: return "&#x27;"; break; //'
                    case 47: return "&#x2F;"; break; // /
                    case 60: return "&lt;"; break; //<
                    case 62: return "&gt;"; break; //>
                    case 198: return "&AElig;"; break;
                    case 193: return "&Aacute;"; break;
                    case 194: return "&Acirc;"; break;
                    case 192: return "&Agrave;"; break;
                    case 197: return "&Aring;"; break;
                    case 195: return "&Atilde;"; break;
                    case 196: return "&Auml;"; break;
                    case 199: return "&Ccedil;"; break;
                    case 208: return "&ETH;"; break;
                    case 201: return "&Eacute;"; break;
                    case 202: return "&Ecirc;"; break;
                    case 200: return "&Egrave;"; break;
                    case 203: return "&Euml;"; break;
                    case 205: return "&Iacute;"; break;
                    case 206: return "&Icirc;"; break;
                    case 204: return "&Igrave;"; break;
                    case 207: return "&Iuml;"; break;
                    case 209: return "&Ntilde;"; break;
                    case 211: return "&Oacute;"; break;
                    case 212: return "&Ocirc;"; break;
                    case 210: return "&Ograve;"; break;
                    case 216: return "&Oslash;"; break;
                    case 213: return "&Otilde;"; break;
                    case 214: return "&Ouml;"; break;
                    case 222: return "&THORN;"; break;
                    case 218: return "&Uacute;"; break;
                    case 219: return "&Ucirc;"; break;
                    case 217: return "&Ugrave;"; break;
                    case 220: return "&Uuml;"; break;
                    case 221: return "&Yacute;"; break;
                    case 225: return "&aacute;"; break;
                    case 226: return "&acirc;"; break;
                    case 230: return "&aelig;"; break;
                    case 224: return "&agrave;"; break;
                    case 229: return "&aring;"; break;
                    case 227: return "&atilde;"; break;
                    case 228: return "&auml;"; break;
                    case 231: return "&ccedil;"; break;
                    case 233: return "&eacute;"; break;
                    case 234: return "&ecirc;"; break;
                    case 232: return "&egrave;"; break;
                    case 240: return "&eth;"; break;
                    case 235: return "&euml;"; break;
                    case 237: return "&iacute;"; break;
                    case 238: return "&icirc;"; break;
                    case 236: return "&igrave;"; break;
                    case 239: return "&iuml;"; break;
                    case 241: return "&ntilde;"; break;
                    case 243: return "&oacute;"; break;
                    case 244: return "&ocirc;"; break;
                    case 242: return "&ograve;"; break;
                    case 248: return "&oslash;"; break;
                    case 245: return "&otilde;"; break;
                    case 246: return "&ouml;"; break;
                    case 223: return "&szlig;"; break;
                    case 254: return "&thorn;"; break;
                    case 250: return "&uacute;"; break;
                    case 251: return "&ucirc;"; break;
                    case 249: return "&ugrave;"; break;
                    case 252: return "&uuml;"; break;
                    case 253: return "&yacute;"; break;
                    case 255: return "&yuml;"; break;
                    case 162: return "&cent;"; break;
                    case '\r': break;
                    default:
                        found = false;
                        break;
                }
                if (!found) {
                    if (thechar > 127) {
                        var c = thechar;
                        var a4 = c % 16;
                        c = Math.floor(c / 16);
                        var a3 = c % 16;
                        c = Math.floor(c / 16);
                        var a2 = c % 16;
                        c = Math.floor(c / 16);
                        var a1 = c % 16;
                        return "&#x" + hex[a1] + hex[a2] + hex[a3] + hex[a4] + ";";
                    }
                    else {
                        return original;
                    }
                }
            }
        }
    </script>
}

